scalar Date

interface Node {
  id: Int!
}

type Query {
  me: User #TODO return UserResponse for errors handling
  profile(name: String!): Profile
  posts: [Post]
}

type Mutation {
  register(registerInput: RegisterUserInput!): User
  login(loginInput: LoginInput!): LoginResponse
  createTier(createTierInput: CreateTierInput!): Tier
  createPost(createPostInput: CreatePostInput!): Post!
  commentPost(commentPostInput: CommentPostInput!): CommentPostResponse!
  replyComment(commentReplyInput: CommentReplyInput!): CommentReplyResponse!
  deleteComment(commentId: Int!): DeleteCommentResponse!
  likeComment(commentId: Int!): LikeCommentResponse!
  unlikeComment(commentId: Int!): UnlikeCommentResponse!
  subscribe(subscribeInput: SubscribeTierInput!): TierSubscription #TODO return payment url
  uploadPostAttachment(postUploadInput: PostUploadInput!): UploadResponse
  uploadAvatar(fileName: String!): UploadResponse
  uploadCoverPhoto(fileName: String!): UploadResponse
}

type UploadResponse {
  uploadUrl: String
  errors: [Error]
}

type LoginResponse {
  token: String
  errors: [Error]
}

type CommentPostResponse {
  comment: Comment
  errors: [Error]
}

type CommentReplyResponse {
  reply: Comment
  errors: [Error]
}

type DeleteCommentResponse {
  comment: Comment
  errors: [Error]
}

type LikeCommentResponse {
  errors: [Error]
}

type UnlikeCommentResponse {
  errors: [Error]
}

type Error {
  field: String
  message: String
  code: String!
}

type User implements Node { # Create different user models
  id: Int!
  name: String!
  avatarUrl: String
  coverPhotoUrl: String
  email: String!
  bio: String
  tiers: [Tier]
  posts: [Post]
  subscriptions: [TierSubscription]
}

type Profile { # Consider using union for public and private user data
  name: String!
  avatarUrl: String
  coverPhotoUrl: String
  bio: String
  tiers: [Tier]
  posts: [Post]
}

type Tier implements Node {
  id: Int!
  name: String!
  description: String
  price: Float
  owner: User!
}

type TierSubscription implements Node {
  id: Int!
  tier: Tier!
  autoRenewal: Boolean!
  expiresAt: Date!
}

type Post implements Node {
  id: Int!
  tier: Tier
  title: String
  content: String
  author: User!
  createdAt: Date!
  attachments: [Attachment]
  comments: [Comment]
  commentsCount: Int!
}

type Attachment {
  url: String!
  name: String
}

type Comment implements Node {
  id: Int!
  createdAt: Date!
  author: Profile!
  message: String!
  replies: [Comment]
  likes: Int!
  liked: Boolean!
  canLike: Boolean!
  deleted: Boolean!
  canDelete: Boolean!
  edited: Boolean!
  canEdit: Boolean!
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
}

input CreateTierInput {
  name: String!
  description: String
  price: Float
}

input SubscribeTierInput {
  tierId: Int!
  #days
}

input CreatePostInput {
  title: String!
  teaserText: String
  tierId: Int!
}

input LoginInput {
  email: String!
  password: String!
}

input PostUploadInput {
  postId: Int!
  fileName: String!
}

input CommentPostInput {
  message: String!
  postId: Int!
}

input CommentReplyInput {
  message: String!
  commentId: Int!
}
