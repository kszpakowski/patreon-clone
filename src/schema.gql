scalar Date

interface Node {
  id: Int!
}

type Query {
  me: User!
  # profile(userName: String)
}

type Mutation {
  register(registerInput: RegisterUserInput!): User
  #   login()
  createTier(createTierInput: CreateTierInput): Tier
  createPost(CreatePostInput: CreatePostInput): Post
  subscribe(subscribeInput: SubscribeTierInput): TierSubscription
}

type User implements Node {
  id: Int!
  name: String!
  email: String!
  tiers: [Tier]
  posts: [Post]
  subscriptions: [TierSubscription]
}

type Tier implements Node {
  id: Int!
  name: String!
  description: String
  price: Float
  owner: User!
}

type TierSubscription implements Node {
  id: Int!
  tier: Tier
  ttl: Date!
}

type Post implements Node {
  id: Int!
  tier: Tier
  title: String
  content: String
  author: User!
}

input RegisterUserInput {
  email: String!
  password: String!
}

input CreateTierInput {
  name: String!
  description: String
  price: Float
}

input SubscribeTierInput {
  tierId: Int!
  #days
}

input CreatePostInput {
  title: String
  tierId: Int
}
