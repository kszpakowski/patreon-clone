scalar Date

interface Node {
  id: Int!
}

type Query {
  me: User!
  profile(name: String!): Profile
  posts: [Post]
}

type Mutation {
  register(registerInput: RegisterUserInput!): User
  login(LoginInput: LoginInput!): User
  createTier(createTierInput: CreateTierInput!): Tier
  createPost(CreatePostInput: CreatePostInput!): Post
  subscribe(subscribeInput: SubscribeTierInput!): TierSubscription
}

type User implements Node { # Create different user models
  id: Int!
  name: String!
  email: String!
  bio: String
  tiers: [Tier]
  posts: [Post]
  subscriptions: [TierSubscription]
}

type Profile { # Consider using union for public and private user data
  name: String!
  bio: String
  tiers: [Tier]
  posts: [Post]
  # avatar, coverPhoto
}

type Tier implements Node {
  id: Int!
  name: String!
  description: String
  price: Float
  owner: User!
}

type TierSubscription implements Node {
  id: Int!
  tier: Tier!
  autoRenewal: Boolean!
  expiresAt: Date!
}

type Post implements Node {
  id: Int!
  tier: Tier
  title: String
  content: String
  author: User!
  # Model comments and reactions
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
}

input CreateTierInput {
  name: String!
  description: String
  price: Float
}

input SubscribeTierInput {
  tierId: Int!
  #days
}

input CreatePostInput {
  title: String
  tierId: Int
}

input LoginInput {
  login: String
  password: String
}
