datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  name               String             @unique
  password           String
  posts              Post[]
  tiers              Tier[]
  avatarFileName     String?
  coverPhotoFileName String?
  subscriptions      TierSubscription[]
  comments           Comment[]
  commentLikes       CommentLike[]
  postLikes          PostLike[]
}

model Post {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  title       String
  published   Boolean      @default(false)
  author      User         @relation(fields: [authorId], references: [id])
  authorId    Int
  tier        Tier         @relation(fields: [tierId], references: [id])
  tierId      Int
  attachments Attachment[]
  comments    Comment[]
  likes       PostLike[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int

  @@unique([postId, authorId], name: "Unique_post_like_per_user")
}

model Attachment {
  id       Int     @id @default(autoincrement())
  title    String?
  fileName String
  post     Post    @relation(fields: [postId], references: [id])
  postId   Int
}

model Comment {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  message         String
  deleted         Boolean       @default(false)
  author          User          @relation(fields: [authorId], references: [id])
  authorId        Int
  replies         Comment[]     @relation("CommentToComment")
  parentComment   Comment?      @relation("CommentToComment", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  post            Post?         @relation(fields: [postId], references: [id])
  postId          Int?
  likes           CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int

  @@unique([commentId, authorId], name: "Unique_comment_like_per_user")
}

model Tier {
  id                Int                @id @default(autoincrement())
  name              String
  description       String
  price             Float //This should use embedded money type, this also could be replaced by SubscriptionPeriod with price related to subscription period
  owner             User               @relation(fields: [ownerId], references: [id])
  ownerId           Int
  tierSubscriptions TierSubscription[]
  posts             Post[]
  level             Int // -1 public, 0 all patreons, 1 first custom, 2 second custom ...

  @@unique([ownerId, level], name: "Unique_tier_level_per_user")
}

model TierSubscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  tier      Tier     @relation(fields: [tierId], references: [id])
  tierId    Int
  expiresAt DateTime
  paid      Boolean  @default(false)
  paymentId String

  @@unique([ownerId, tierId], name: "Unique_subscription_per_tier")
}
