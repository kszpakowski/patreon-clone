datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  name               String             @unique
  password           String
  posts              Post[]
  tiers              Tier[]
  avatarFileName     String?
  coverPhotoFileName String?
  subscriptions      TierSubscription[]
  Comment            Comment[]
}

model Post {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  title       String
  published   Boolean      @default(false)
  author      User         @relation(fields: [authorId], references: [id])
  authorId    Int
  tier        Tier         @relation(fields: [tierId], references: [id])
  tierId      Int
  attachments Attachment[]
  comments    Comment[]
}

model Attachment {
  id       Int     @id @default(autoincrement())
  title    String?
  fileName String
  post     Post    @relation(fields: [postId], references: [id])
  postId   Int
}

model Comment {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  message         String
  deleted         Boolean
  author          User      @relation(fields: [authorId], references: [id])
  authorId        Int
  replies         Comment[] @relation("CommentToComment")
  parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  Post            Post?     @relation(fields: [postId], references: [id])
  postId          Int?
}

model Tier {
  id                Int                @id @default(autoincrement())
  name              String
  description       String
  price             Float //This should use embedded money type, this also could be replaced by SubscriptionPeriod with price related to subscription period
  owner             User               @relation(fields: [ownerId], references: [id])
  ownerId           Int
  tierSubscriptions TierSubscription[]
  posts             Post[]
}

model TierSubscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  tier      Tier     @relation(fields: [tierId], references: [id])
  tierId    Int
  expiresAt DateTime
  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   Int?
  paid      Boolean  @default(false)
  paymentId String
}
